#version 450
#extension GL_KHR_shader_subgroup_basic: enable
#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_KHR_shader_subgroup_arithmetic: enable
#extension GL_KHR_shader_subgroup_vote: enable
#extension GL_EXT_debug_printf : require


layout(set = 0, binding = 0) buffer Keys
{
    uint keys[];
};

layout(set = 0, binding = 1) uniform Constants{
    uint n;
};

layout(set = 0, binding = 2) buffer Contributes{
    uint contributes[];
};

layout(local_size_x = 256) in;



void findDups(){
    uint num_tiles = ceil(float(n) / float(gl_WorkGroupSize.x));
        for (uint tile_idx = gl_WorkGroupID.x; tile_idx < num_tiles; tile_idx += gl_NumWorkGroups.x){
        int idx = tile_idx * gl_NumWorkGroups.x  + gl_localInvocationID.x;

        if (idx > 0 && idx < N){
        // code only contributse to all nodes if different than its left neighbor
            contributes[idx] = (keys[idx] != keys[idx-1]);
        }

        if (idx == 0){
            contributes[idx] = 0;
        }
    }
    
}
void main(){
    findDups();
}