#version 450
#extension GL_KHR_shader_subgroup_basic:enable
#extension GL_KHR_shader_subgroup_ballot:enable
#extension GL_KHR_shader_subgroup_arithmetic:enable
#extension GL_KHR_shader_subgroup_vote:enable
#extension GL_EXT_debug_printf:enable
#extension GL_EXT_shader_explicit_arithmetic_types_int8:enable

#define BASE_BITS 8
#define BASE (1<<BASE_BITS)
#define MASK (BASE-1)
#define DIGITS(v,shift)(((v)>>shift)&MASK)
#define TotalThreadsX gl_NumWorkGroups.x*gl_WorkGroupSize.x
#define TotalThreadsY gl_NumWorkGroups.y*gl_WorkGroupSize.y
#define TotalThreadsZ gl_NumWorkGroups.z*gl_WorkGroupSize.z
#define TotalThreads TotalThreadsX*TotalThreadsY*TotalThreadsZ
#define ITEM_PER_THREAD n/(TotalThreads)
#define IDX gl_GlobalInvocationID.x
#define STRIDE gl_WorkGroupSize.x*gl_NumWorkGroups.x

layout(set=0,binding=0)buffer Data{
  int data[];
};
layout(set=0,binding=1)uniform Size{
  uint n;
};

layout(set=0,binding=2)buffer OutData{
  int out_data[];
};
layout(local_size_x=512)in;

shared int bucket[BASE];

void lsd_radix_sort(){
  int startIdx=int(gl_GlobalInvocationID.x*ITEM_PER_THREAD);
  int endIdx=int(min(startIdx+ITEM_PER_THREAD,n));
  int total_digits=4*8;
  
  // Each thread use local_bucket to move data
  int i;
  for(int shift=0;shift<total_digits;shift+=BASE_BITS){
    //int bucket[BASE];
    bucket[0]=0;
    int local_bucket[BASE];// size needed in each bucket/thread
    local_bucket[0]=0;
    // 1st pass, scan whole and check the count
    {
      for(i=int(IDX);i<n;i+=int(STRIDE)){
        local_bucket[DIGITS(data[i],shift)]++;
      }
      if(gl_GlobalInvocationID.x==0){
        for(i=0;i<BASE;i++){
          bucket[i]+=local_bucket[i];
        }
      }
      groupMemoryBarrier();
      barrier();
      
      if(gl_GlobalInvocationID.x==0){
        for(i=1;i<BASE;i++){
          bucket[i]+=bucket[i-1];
        }
      }
      groupMemoryBarrier();
      barrier();
      uint nthreads=gl_NumWorkGroups.x*gl_WorkGroupSize.x;
      uint tid=gl_GlobalInvocationID.x;
      // is that correct?
      for(int cur_t=int(nthreads-1);cur_t>=0;cur_t--){
        if(cur_t==tid){
          for(i=0;i<BASE;i++){
            bucket[i]-=local_bucket[i];
            local_bucket[i]=bucket[i];
          }
        }else{// just do barrier
          groupMemoryBarrier();
          barrier();
        }
      }
      groupMemoryBarrier();
      barrier();
      for(i=int(IDX);i<n;i+=int(STRIDE)){// note here the end condition
        out_data[local_bucket[DIGITS(data[i],shift)]++]=data[i];
      }
    }
  }
}

void main(){
  lsd_radix_sort();
}